// <auto-generated />
using System;
using Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Domain.Entities.AccessGrant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<string>("DataOwnerUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("GrantedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("RequestedItemId")
                        .HasColumnType("integer");

                    b.Property<string>("RequesterUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("RevokedAt")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("RequesterUserId");

                    b.HasIndex("DataOwnerUserId", "RequesterUserId", "Category", "RequestedItemId", "RevokedAt")
                        .IsUnique();

                    b.ToTable("access_grants", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.AccessRequest", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DataOwnerUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("RequestedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("RequestedCategory")
                        .HasColumnType("integer");

                    b.Property<int?>("RequestedItemId")
                        .HasColumnType("integer");

                    b.Property<string>("RequesterUserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ReviewedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DataOwnerUserId")
                        .HasDatabaseName("ix_access_requests_owner_id");

                    b.HasIndex("RequestedItemId");

                    b.HasIndex("RequesterUserId")
                        .HasDatabaseName("ix_access_requests_requester_id");

                    b.ToTable("access_requests", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.Name", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<bool>("IsDefaultForCategory")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("MiddleName")
                        .HasMaxLength(128)
                        .HasColumnType("character varying(128)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId", "Category", "IsDefaultForCategory")
                        .IsUnique()
                        .HasFilter("\"IsDeleted\" = false AND \"IsDefaultForCategory\" = true");

                    b.ToTable("names", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.SpecificRevocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AccessGrantId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("UserDataItemId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserDataItemId");

                    b.HasIndex("AccessGrantId", "UserDataItemId")
                        .IsUnique();

                    b.ToTable("specific_revocations", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("Domain.Entities.UserDataItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Category")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("DeletedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("user_data_items", (string)null);
                });

            modelBuilder.Entity("Infrastructure.Persistence.ProcessedEvent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("ProcessedUtc")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.ToTable("ProcessedEvents");
                });

            modelBuilder.Entity("Domain.Entities.AccessGrant", b =>
                {
                    b.HasOne("Domain.Entities.User", "DataOwnerUser")
                        .WithMany()
                        .HasForeignKey("DataOwnerUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.User", "RequesterUser")
                        .WithMany()
                        .HasForeignKey("RequesterUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DataOwnerUser");

                    b.Navigation("RequesterUser");
                });

            modelBuilder.Entity("Domain.Entities.AccessRequest", b =>
                {
                    b.HasOne("Domain.Entities.User", "DataOwnerUser")
                        .WithMany()
                        .HasForeignKey("DataOwnerUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserDataItem", "RequestedItem")
                        .WithMany()
                        .HasForeignKey("RequestedItemId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("Domain.Entities.User", "RequesterUser")
                        .WithMany()
                        .HasForeignKey("RequesterUserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DataOwnerUser");

                    b.Navigation("RequestedItem");

                    b.Navigation("RequesterUser");
                });

            modelBuilder.Entity("Domain.Entities.Name", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.SpecificRevocation", b =>
                {
                    b.HasOne("Domain.Entities.AccessGrant", "AccessGrant")
                        .WithMany("SpecificRevocations")
                        .HasForeignKey("AccessGrantId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Domain.Entities.UserDataItem", "UserDataItem")
                        .WithMany("SpecificRevocations")
                        .HasForeignKey("UserDataItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("AccessGrant");

                    b.Navigation("UserDataItem");
                });

            modelBuilder.Entity("Domain.Entities.UserDataItem", b =>
                {
                    b.HasOne("Domain.Entities.User", "User")
                        .WithMany("DataItems")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Domain.Entities.AccessGrant", b =>
                {
                    b.Navigation("SpecificRevocations");
                });

            modelBuilder.Entity("Domain.Entities.User", b =>
                {
                    b.Navigation("DataItems");
                });

            modelBuilder.Entity("Domain.Entities.UserDataItem", b =>
                {
                    b.Navigation("SpecificRevocations");
                });
#pragma warning restore 612, 618
        }
    }
}
