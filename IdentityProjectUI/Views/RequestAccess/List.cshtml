@model PagedResult<UserDto>
@{
    ViewData["Title"] = "Request access to data";

    var totalPages = Model.PageSize > 0
        ? (int)Math.Ceiling((double)Model.TotalCount / Model.PageSize)
        : 1;
    var currentPage = Math.Max(1, Model.PageNumber);
    var pageSize = Math.Max(1, Model.PageSize);

    var currentSearch = (string?)Context.Request.Query["search"] ?? string.Empty;

    string Query(int page, int size)
        => $"/RequestAccess/List?pageNumber={page}&pageSize={size}{(string.IsNullOrWhiteSpace(currentSearch) ? "" : $"&search={Uri.EscapeDataString(currentSearch)}")}";
}

<section class="container py-4">
    <div class="d-flex align-items-center justify-content-between mb-3 flex-wrap gap-2">
        <div>
            <h1 class="h4 mb-1">Request access to data</h1>
            <p class="text-muted mb-0">Search for a user and request access to specific data categories.</p>
        </div>

        <div class="d-flex align-items-center gap-2">
            <form method="get" action="/RequestAccess/List" class="d-flex align-items-center">
                <input type="hidden" name="pageNumber" value="1" />
                @if (!string.IsNullOrWhiteSpace(currentSearch))
                {
                    <input type="hidden" name="search" value="@currentSearch" />
                }
                <label class="me-2 text-muted small">Items</label>
                <select name="pageSize" class="form-select form-select-sm" onchange="this.form.submit()">
                    @{
                        int[] sizes = new[] { 5, 10, 20, 50 };
                        foreach (var s in sizes)
                        {
                            <option value="@s" selected="@(s == pageSize ? "selected" : null)">@s</option>
                        }
                    }
                </select>
            </form>

            <form method="get" action="/RequestAccess/List" class="d-flex align-items-center">
                <input type="hidden" name="pageNumber" value="1" />
                <input type="hidden" name="pageSize" value="@pageSize" />
                <div class="input-group input-group-sm">
                    <input type="text" name="search" class="form-control" placeholder="Search by name or email"
                           value="@currentSearch" />
                    <button type="submit" class="btn btn-dark">Search</button>
                </div>
            </form>
        </div>
    </div>

    @if (Model.Items is { Count: > 0 })
    {
        <div class="table-responsive shadow-sm rounded">
            <table class="table table-hover align-middle mb-0">
                <thead class="table-light">
                <tr>
                    <th class="text-muted small">Id</th>
                    <th>User name</th>
                    <th>Email</th>
                    <th class="text-end">Request data</th>
                </tr>
                </thead>
                <tbody>
                @foreach (var user in Model.Items)
                {
                    <tr>
                        <td class="text-muted small">@user.Id</td>
                        <td>@user.Username</td>
                        <td>@user.Email</td>
                        <td class="text-end">
                            <a class="btn btn-sm btn-outline-primary" href="/RequestAccess/NewRequest/@user.Id">
                                New request
                            </a>
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>

        <div class="d-flex align-items-center justify-content-between mt-3">
            
            @if (totalPages > 1)
            {
                <nav aria-label="Users pagination">
                    <ul class="pagination mb-0">
                        <li class="page-item @(currentPage == 1 ? "disabled" : null)">
                            <a class="page-link" href="@(currentPage == 1 ? "#" : Query(currentPage - 1, pageSize))">Previous</a>
                        </li>

                        @{
                            int maxButtons = 7;
                            int start = Math.Max(1, currentPage - 3);
                            int end = Math.Min(totalPages, start + maxButtons - 1);
                            start = Math.Max(1, Math.Min(start, end - maxButtons + 1));

                            if (start > 1)
                            {
                                <li class="page-item"><a class="page-link" href="@Query(1, pageSize)">1</a></li>
                                if (start > 2)
                                {
                                    <li class="page-item disabled"><span class="page-link">…</span></li>
                                }
                            }

                            for (int i = start; i <= end; i++)
                            {
                                <li class="page-item @(i == currentPage ? "active" : null)">
                                    <a class="page-link" href="@Query(i, pageSize)">@i</a>
                                </li>
                            }

                            if (end < totalPages)
                            {
                                if (end < totalPages - 1)
                                {
                                    <li class="page-item disabled"><span class="page-link">…</span></li>
                                }
                                <li class="page-item"><a class="page-link" href="@Query(totalPages, pageSize)">@totalPages</a></li>
                            }
                        }

                        <li class="page-item @(currentPage == totalPages ? "disabled" : null)">
                            <a class="page-link" href="@(currentPage == totalPages ? "#" : Query(currentPage + 1, pageSize))">Next</a>
                        </li>
                    </ul>
                </nav>
            }
        </div>
    }
    else
    {
        <div class="card shadow-sm">
            <div class="card-body text-center py-5">
                <h2 class="h5 mb-2">No users found</h2>
                @if (!string.IsNullOrWhiteSpace(currentSearch))
                {
                    <p class="text-muted mb-4">No results for “@currentSearch”. Try a different query or clear the search.</p>
                    <a class="btn btn-outline-secondary" href="/RequestAccess/List?pageNumber=1&pageSize=@pageSize">Clear search</a>
                }
                else
                {
                    <p class="text-muted mb-4">Start by searching for a user to request access.</p>
                }
            </div>
        </div>
    }
</section>
