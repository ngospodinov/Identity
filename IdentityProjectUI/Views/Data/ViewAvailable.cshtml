@model AvailableDataModel
@{
    var category = string.IsNullOrWhiteSpace(Model.Category) ? "Unknown" : Model.Category;
    ViewData["Title"] = $"{category} data";
}

<section class="container py-4">
    <div class="d-flex align-items-center justify-content-between mb-3 flex-wrap gap-2">
        <div class="d-flex align-items-center">
            <h1 class="h4 mb-0 me-2">@category data</h1>
            <span class="badge bg-secondary">@category</span>
        </div>
        <div class="d-flex gap-2">
            <a href="/Data/List" class="btn btn-outline-secondary btn-sm">Back to users</a>
        </div>
    </div>

    <div class="card mb-4 shadow-sm">
        <div class="card-header">
            <strong>User</strong>
        </div>
        <div class="card-body">
            @if (Model.UserData is not null)
            {
                <dl class="row gy-2 mb-0">
                    <dt class="col-sm-3">Id</dt>
                    <dd class="col-sm-9 d-flex align-items-center gap-2">
                        <span class="text-monospace">@(!string.IsNullOrWhiteSpace(Model.UserData.Id) ? Model.UserData.Id : "—")</span>
                        @if (!string.IsNullOrWhiteSpace(Model.UserData.Id))
                        {
                            <button type="button" class="btn btn-sm btn-outline-secondary copy-btn"
                                    data-copy="@Model.UserData.Id" title="Copy Id">Copy</button>
                        }
                    </dd>

                    <dt class="col-sm-3">Username</dt>
                    <dd class="col-sm-9">@(!string.IsNullOrWhiteSpace(Model.UserData.Username) ? Model.UserData.Username : "—")</dd>

                    <dt class="col-sm-3">Email</dt>
                    <dd class="col-sm-9 d-flex align-items-center gap-2">
                        <span>@(!string.IsNullOrWhiteSpace(Model.UserData.Email) ? Model.UserData.Email : "—")</span>
                        @if (!string.IsNullOrWhiteSpace(Model.UserData.Email))
                        {
                            <button type="button" class="btn btn-sm btn-outline-secondary copy-btn"
                                    data-copy="@Model.UserData.Email" title="Copy email">Copy</button>
                        }
                    </dd>
                </dl>
            }
            else
            {
                <div class="text-muted">No user data.</div>
            }
        </div>
    </div>

    <div class="card mb-4 shadow-sm">
        <div class="card-header d-flex align-items-center gap-2">
            <strong>Name (default for category)</strong>
            @if (Model.NameData?.IsDefaultForCategory == true)
            {
                <span class="badge bg-success">Default</span>
            }
        </div>
        <div class="card-body">
            @if (Model.NameData is not null && Model.NameData.Id != 0)
            {
                <dl class="row gy-2 mb-0">
                    <dt class="col-sm-3">Full name</dt>
                    <dd class="col-sm-9">@Model.NameData.FullName/dd>
                </dl>
            }
            else
            {
                <div class="alert alert-warning mb-0">
                    No default name set for this category.
                </div>
            }
        </div>
    </div>

    <div class="card shadow-sm">
        <div class="card-header d-flex justify-content-between align-items-center">
            <strong>Data items</strong>
            <span class="badge bg-primary">@(Model.DataItems?.Count ?? 0)</span>
        </div>
        <div class="card-body p-0">
            @if (Model.DataItems is not null && Model.DataItems.Count > 0)
            {
                <div class="table-responsive">
                    <table class="table table-striped table-hover align-middle mb-0">
                        <thead class="table-light">
                        <tr>
                            <th class="text-muted small" style="width: 100px;">Id</th>
                            <th style="width: 240px;">Key</th>
                            <th>Value</th>
                            <th style="width: 200px;">Category</th>
                        </tr>
                        </thead>
                        <tbody>
                        @foreach (var item in Model.DataItems)
                        {
                            <tr>
                                <td class="text-monospace">@item.Id</td>
                                <td class="text-truncate" title="@item.Key">@item.Key</td>
                                <td>@(string.IsNullOrWhiteSpace(item.Value) ? "—" : item.Value)</td>
                                <td>
                                    @if (!string.IsNullOrWhiteSpace(item.Category))
                                    {
                                        <span class="badge bg-secondary">@item.Category</span>
                                    }
                                    else
                                    {
                                        <span class="text-muted">—</span>
                                    }
                                </td>
                            </tr>
                        }
                        </tbody>
                    </table>
                </div>
            }
            else
            {
                <div class="p-3">
                    <div class="text-muted">No data items for this category.</div>
                </div>
            }
        </div>
    </div>
</section>

@section Scripts {
    <script>
        document.addEventListener("DOMContentLoaded", () => {
            document.querySelectorAll(".copy-btn").forEach(btn => {
                btn.addEventListener("click", async () => {
                    const text = btn.getAttribute("data-copy") || "";
                    try {
                        await navigator.clipboard.writeText(text);
                        const original = btn.textContent;
                        btn.textContent = "Copied";
                        btn.classList.remove("btn-outline-secondary");
                        btn.classList.add("btn-success");
                        setTimeout(() => {
                            btn.textContent = original;
                            btn.classList.remove("btn-success");
                            btn.classList.add("btn-outline-secondary");
                        }, 1200);
                    } catch {
                        alert("Copied: " + text);
                    }
                });
            });
        });
    </script>
}

<style>
    .text-monospace { font-family: ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace; }
    .table td, .table th { vertical-align: middle; }
</style>
